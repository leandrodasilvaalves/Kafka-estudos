version: '3.4'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: ${PROJECT_NAME}.zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: ${PROJECT_NAME}.broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1    
    depends_on:
      - zookeeper

  init-kafka:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: ${PROJECT_NAME}.init-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payments --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic customers --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic products --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    ports:
        - 8080:8080
    depends_on:
      - kafka


  payments:
    image: ${PROJECT_NAME}.payments
    container_name: ${PROJECT_NAME}.payments
    build:
      context: .
      dockerfile: Services/Payments/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Consumers__BootstrapServers=${KAFKA_URL}
      - Producers__BootstrapServers=${KAFKA_URL}
    depends_on:
      - kafka

  orders:
    image: ${PROJECT_NAME}.orders
    container_name: ${PROJECT_NAME}.orders
    build:
      context: .
      dockerfile: Services/Orders/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Consumers__BootstrapServers=${KAFKA_URL}
      - Consumers__SecurityProtocol=${KAFKA_SECURITY_PROTOCOL}
      - Kafka__BootstrapServers=${KAFKA_URL}
    ports:
      - 7287:80
    depends_on:
      - kafka

  emails:
    image: ${PROJECT_NAME}.emails
    container_name: ${PROJECT_NAME}.emails
    build:
      context: .
      dockerfile: Services/Emails/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Consumers__BootstrapServers=${KAFKA_URL}
    depends_on:
      - kafka

  logs:
    image: ${PROJECT_NAME}.logs
    container_name: ${PROJECT_NAME}.logs
    build:
      context: .
      dockerfile: Services/LogsProcessor/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Consumers__BootstrapServers=${KAFKA_URL}
    depends_on:
      - kafka
